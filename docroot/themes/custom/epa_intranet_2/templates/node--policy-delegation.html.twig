{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}




{{ attach_library('classy/node') }}
<article{{attributes.addClass(classes)}}>

	{{ title_prefix }}
	{% if label and not page %}
		<h2{{title_attributes}}>
			<a href="{{ url }}" rel="bookmark">{{ label }}</a>
		</h2>
	{% endif %}
	{{ title_suffix }}

	{% if display_submitted %}
		<footer class="node__meta">
			{{ author_picture }}
			<div{{author_attributes.addClass('node__submitted')}}>
				{% trans %}Submitted by
				{{ author_name }}
				on
				{{ date }}{% endtrans %}
				{{ metadata }}
			</div>
		</footer>
	{% endif %}

    {% if 'Rescinded' in content.field_rescind_this_delegation[0] %}
    <div class="usa-alert usa-alert-normalizer usa-alert--error">
    <div class="usa-alert__body">
    <p class="usa-alert__heading">This Delegation has been Rescinded</p>
    <p class="usa-alert__text">{{ content.field_rescission_date }}</p>
	<p class="usa-alert__text">{{ content.field_rescission_notes }}</p>
	<hr>
	<p class="usa-alert__text"><strong>Delegation's Original Effective/Approval Date:</strong> {{ content.field_effective_date.0 }}</p>
    </div>
    </div>

	{% else %}

	<div{{ content_attributes.addClass('node__content') }}>



 {#  content|without('field_rescind_this_delegation','field_rescission_date', 'field_rescission_notes', 'field_governing_authorities', 'field_keywords', 'field_signed_memo') #}
    {{ content.field_prior_identifier }}
    {{ content.field_chapter }}
    {{ content.field_effective_date }}
    {{ content.field_admin_update_date }}
    {{ content.field_link_to_delegation_file }}
    {% if content.field_delegation_preamble1|render|trim is not empty %}
      <div class="field__item">{{ content.field_delegation_preamble1 }}</div>
    {% endif %}
    <ol>
      {% if content.field_autho|render|trim is not empty %}
        <li>{{ content.field_autho }}</li>
      {% endif %}
      {% if content.field_to_whom_delegated|render|trim is not empty %}
        <li>{{ content.field_to_whom_delegated }}</li>
      {% endif %}
      {% if 'This delegation has the following limitations' in content.field_limitations|render|render %}
        <li>
          {{ content.field_limitations }}
          {{ content.field_limitation }}
        </li>
      {% else %}
        <li>{{ content.field_limitations }}</li>
      {% endif %}
      {% if 'May NOT be redelegated.' in content.field_redelegation|render|render  %}
        <li>{{ content.field_redelegation  }}</li>
      {% else %}
        <li>
          <ul>
            {% if content.field_redelegation_language|render|trim is not empty %}
              <li>{{ content.field_redelegation_language }}</li>
            {% endif %}
            {% if content.field_redelegation_authority|render|trim is not empty %}
              <li>{{ content.field_redelegation_authority }}</li>
            {% endif %}
          </ul>
        </li>
      {% endif %}
      <li><div class="field__label display-inline">Additional References.</div>
        {% if content.field_references|render|trim is not empty %}
          {{ content.field_references }}
        {% else %}
          <p>None.</p>
        {% endif %}
      </li>
    </ol>
    {% if content.field_delegation_supercession1|render|trim is not empty %}
      <div class="field__item">{{ content.field_delegation_supercession1 }}</div>
    {% endif %}
    {% if content.field_signed_memo|render|trim is not empty %}
      <div class="field__item">{{ content.field_signed_memo }}</div>
    {% endif %}
    {% if content.field_keywords|render|trim is not empty %}
      {{ content.field_keywords }}
    {% endif %}
  </div>
	{% endif %}

	</article>
