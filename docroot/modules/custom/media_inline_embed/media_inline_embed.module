<?php

/**
 * @file
 * Contains media_inline_embed.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityDisplayInterface;

/**
 * Implements hook_theme().
 */
function media_inline_embed_theme($existing, $type, $theme, $path) {
  return [
    'media__inline_embed' => [
      'template' => 'media--inline-embed',
      'path' => $path .'/templates',
      'base hook' => 'media',
    ],
    'field__inline_embed' => [
      'template' => 'field--inline-media',
      'path' => $path .'/templates',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function media_inline_embed_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  switch ($hook) {
    case 'media':
      // Get information about embed from display.
      $elements = $variables['elements'];
      $media = $elements['#media'];
      $embed_info = _media_inline_embed_get_embed_info($elements, $media->bundle());

      // If view mode is meant to be embedded inline add theme suggestions.
      if ($embed_info['embed_inline']) {
        $suggestions[] = $hook . '__inline_embed';
        $suggestions[] = 'media__' . $media->bundle() . '__inline_embed';
        $suggestions[] = 'media__' . $media->bundle() . '__' . $embed_info['sanitized_view_mode'] . '__inline_embed';
      }
      break;

    case 'field':
      // Get information about embed from display.
      if (empty($variables['element']) || $variables['element']['#entity_type'] != 'media') {
        return;
      }
      $elements = $variables['element'];
      $embed_info = _media_inline_embed_get_embed_info($elements, $elements['#bundle']);

      // If parent view mode is embedded inline add theme suggestion for field.
      if ($embed_info['embed_inline']) {
        $suggestions[] = $hook . '__inline_embed';
        $suggestions[] = $hook . '__' . $elements['#entity_type'] . '__inline_embed';
        $suggestions[] = $hook . '__' . $elements['#entity_type'] . '__' . $elements['#bundle'] . '__inline_embed';
      }
      break;
  }
}

/**
 * Helper function to return display and view mode as sanitized string.
 */
function _media_inline_embed_get_embed_info($elements, $bundle) {
  $entity_type = $elements['#entity_type'];
  $view_mode = $elements['#view_mode'] == 'full' ? 'default' : $elements['#view_mode'];

  // Load display.
  $display_id = implode('.', [$entity_type, $bundle, $view_mode]);
  $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  $display = $storage->load($display_id);
  if (empty($display)) {
    return ['embed_inline' => FALSE];
  }

  $sanitized_view_mode = strtr($view_mode, '.', '_');

  return [
    'embed_inline' => $display->getThirdPartySetting('media_inline_embed', 'embed_inline', FALSE),
    'sanitized_view_mode' => $sanitized_view_mode,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_inline_embed_form_entity_view_display_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $display = $form_state->getFormObject()->getEntity();

  // We want to act on entities of type media.
  if ($display->getTargetEntityTypeId() == 'media') {
    $embed_inline = $display->getThirdPartySetting('media_inline_embed', 'embed_inline', FALSE);

    $form['wysiwyg'] = [
      '#type' => 'details',
      '#open' => TRUE,
      '#title' => t('WYSIWYG options'),
      '#tree' => TRUE,
    ];
    $form['wysiwyg']['embed_inline'] = [
      '#type' => 'checkbox',
      '#title' => t('Embed inline'),
      '#description' => t('Allow content editors to embed entities with this view mode inline in WYSIWYG'),
      '#default_value' => $embed_inline,
    ];
    $form['#entity_builders']['media_inline_embed'] = '_media_inline_embed_entity_view_display_form_entity_builder';
  }
}

/**
 * Entity builder for entity_view_display_edit_form.
 */
function _media_inline_embed_entity_view_display_form_entity_builder($entity_type_id, EntityDisplayInterface $display, &$form, FormStateInterface &$form_state) {
  $embed_inline = (bool) $form_state->getValue(['wysiwyg', 'embed_inline'], FALSE);
  $display->setThirdPartySetting('media_inline_embed', 'embed_inline', $embed_inline);
}
