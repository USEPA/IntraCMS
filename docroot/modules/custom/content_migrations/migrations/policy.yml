#id: policy
#label: 'JSON migration - Policy'
#migration_tags: null
#migration_group: migrate_content
#source:
#  plugin: url
#  # Specifies the http fetcher plugin.
#  data_fetcher_plugin: http
#  # Specifies the JSON parser plugin.
#  data_parser_plugin: json
##  authentication:
##    plugin: basic
##    username: 'hamster'
##    password: 'GummyBear2389'
#  headers:
#    Accept: 'application/json; charset=utf-8'
#    Content-Type: 'application/json'
#  # One or more URLs from which to fetch the source data.
#  urls: https://webxdev.ord.epa.gov/dev2/api/content?type=policy&fields=all&limit=20
#  # For JSON, item_selector is the xpath used to select
#  # our source items (tags in this case).
#  item_selector: 0
#  # For each source field, we specify a selector,
#  # the field name which will be used to access the field in the
#  # process configuration, and a label to document the meaning
#  # of the field in front-ends.
#  fields:
#    -
#      name: field_effective_date
#      label: 'Effective Date'
#      selector: /fields/field_effective_date
#    -
#      name: title
#      label: 'Policy Name'
#      selector: /title
#    -
#      name: nid
#      label: 'NID'
#      selector: /nid
#    -
#      name: group_rescind
#      label: 'Policy Status (Use Only to Rescind this Policy)'
#      selector: /fields/group_rescind
#    -
#      name: field_policy_statement
#      label: 'Policy Statement'
#      selector: /fields/field_policy_statement
#    -
#      name: field_policy_background
#      label: 'Policy Background'
#      selector: /fields/field_policy_background
#    -
#      name: field_topic_area_of_authority
#      label: 'Topic Area of Authority'
#      selector: /fields/field_topic_area_of_authority
#  # Under ids, we specify which of the source fields retrieved
#  # above (product_id in this case) represent our unique
#  # identifier for the item, and the schema type for that field.
#  ids:
#    nid:
#      type: string
#
#destination:
#  plugin: entity:node
#process:
#  # If you are using this file to build a custom migration consider removing
#  # the nid and vid fields to allow incremental migrations.
#  # In D7, nodes always have a tnid, but it's zero for untranslated nodes.
#  # We normalize it to equal the nid in that case.
#  # @see \Drupal\node\Plugin\migrate\source\d7\Node::prepareRow().
#  langcode:
#    plugin: default_value
#    source: language
#    default_value: "und"
#  title: title
#  uid: node_uid
#  status: status
#  created: created
#  changed: changed
#  promote: promote
#  sticky: sticky
#  revision_uid: revision_uid
#  revision_log: log
#  revision_timestamp: timestamp
#  type:
#    plugin: default_value
#    default_value: policy
#  field_policy_background/value: field_policy_background/0/value
#  field_policy_background/safe_value: field_policy_background/0/safe_value
#  field_policy_background/format:
#    plugin: default_value
#    default_value: "rich_text"
#  field_policy_statement/value: field_policy_statement/0/value
#  field_policy_statement/safe_value: field_policy_statement/0/safe_value
#  field_policy_statement/format:
#    plugin: default_value
#    default_value: "rich_text"
#  field_effective_date:
#    plugin: iterator
#    source: field_effective_date
#    process:
#      value:
#        plugin: substr
#        source: value
#        start: 0
#        length: 10
#  field_topic_area_of_authority: field_topic_area_of_authority
#migration_dependencies:
#  required:
#    - policy_topics
