<?php

/**
 * @file
 * Contains content_migrations.module.
 */

use Drupal\media\Entity\Media;
use Drupal\migrate\Row;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function content_migrations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_migrations module.
    case 'help.page.content_migrations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Content migration scripts from SQL DB') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_migrate_prepare_row().
 */
function content_migrations_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if ($migration->id() === 'calendar_events') {
    format_smart_date($row);
  } else if ($migration->id() === 'staff_member') {
    create_file_and_media($row);
  }
}

/**
 * @param Row $row
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function create_file_and_media(Row $row): void {
  $image_data = $row->getSourceProperty('field_staff_image');
  $file_name = $image_data[0]['filename'];
  $file_data = file_get_contents('http://localhost:8085/sites/default/files/staff/' . $file_name);
  if ($file_data) {
    $file = file_save_data($file_data, 'public://staff/' . $file_name, FILE_EXISTS_REPLACE);

    $media = Media::create([
        'bundle' => 'image',
        'uid' => \Drupal::currentUser()->id(),
        'langcode' => \Drupal::languageManager()->getDefaultLanguage()->getId(),
        'status' => 1,
        'name' => $file_name,
        'field_media_in_library' => [
          0
        ],
        'image' => [
          'target_id' => $file->id(),
        ]
      ]
    );
    $media->save();
    $row->setSourceProperty('media_image_target_id', $media->id());
  }
}

/**
 * @param Row $row
 * @throws Exception
 */
function format_smart_date(Row $row): void {
  $smart_date_field = [];
  $date = $row->getSourceProperty('field_event_date')[0];
  $start_time = strtotime($date['value']);
  $end_time = strtotime($date['value2']);
  $duration = $end_time - $start_time;
  $smart_date_field['value'] = $start_time;
  $smart_date_field['end_value'] = $end_time;
  $smart_date_field['duration'] = $duration;
  $row->setSourceProperty('field_event_date', $smart_date_field);
}

