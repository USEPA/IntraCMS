<?php

/**
 * @file
 * Contains epa_wysiwyg.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_library_info_alter().
 */
function epa_wysiwyg_library_info_alter(&$libraries, $extension) {
  // Add CKEditor overrides JS file to CKEditor library.
  if ($extension == 'ckeditor' && isset($libraries['drupal.ckeditor'])) {
    $module_path = drupal_get_path('module', 'epa_wysiwyg');
    $js_path = "/$module_path/js/ckeditor-overrides.js";
    $libraries['drupal.ckeditor']['js'][$js_path] = [];
  }
}

/**
 * Implements hook_page_attachments().
 */
function epa_wysiwyg_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'epa_wysiwyg/epa-new';
}
/**
* function epa_wysiwyg_pathologic_alter(&$url_params, $parts, $settings) {
*  // Do not rewrite links to minio container.  This is necessary because
*  // Pathologic does not respect ports when matching host names.
*  if (isset($parts['port']) && isset($parts['host']) && $parts['port'] === 8888 && $parts['host'] === 'localhost') {
*    $url_params['options']['use_original'] = true;
*  }
* }
 */

/**
 * Implements hook_theme().
 */
function epa_wysiwyg_theme() {
  return [
    'epa_file_link' => [
      'variables' => ['file' => NULL, 'link_text' => NULL, 'attributes' => []],
    ],
  ];
}

/**
 * Prepares variables for epa file link templates.
 *
 * Default template: epa-file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: A File entity to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "icon.directory" variable.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_epa_file_link(&$variables) {
  $file = $variables['file'];
  $options = [];

  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = $file->createFileUrl(FALSE);
  $variables['#cache']['contexts'][] = 'url.site';

  $mime_type = $file->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Classes to add to the file field for icons.
  $classes = [
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, ['/' => '-', '.' => '-']),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  ];

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);
  $variables['file_size'] = format_size($file->getSize());
  $variables['url'] = Url::fromUri($url, $options);
  $variables['link'] = Link::fromTextAndUrl($variables['link_text'], $variables['url'])->toRenderable();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function epa_wysiwyg_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach our custom javascript library.
  $form['#attached']['library'][] = 'epa_wysiwyg/epa-wysiwyg-linkit';

  // Provide a fieldset for switching the profile.
  $form['attributes']['select-profile'] = [
    '#title' => t('Filter search results'),
    '#type' => 'radios',
    '#options' => [
      'web_area_content' => t('Your content'),
      'default' => t('No filter: all EPA@Work content'),
    ],
    'web_area_content' => [
      '#description' => t('Search within your web areas only.'),
    ],
    'default' => [
      '#description' => t('Search within your web areas and work.epa.gov'),
    ],
    '#weight' => -20,
    '#default_value' => 'default',
  ];

  // Add states to disable and hide the default linkit input unless the default
  // profile is selected.
  $form['attributes']['href_default'] = array_merge($form['attributes']['href'], [
    '#type' => 'linkit',
    '#description' => t('Start typing to find content.'),
    '#autocomplete_route_name' => 'linkit.autocomplete',
    '#autocomplete_route_parameters' => [
      'linkit_profile_id' => 'default',
    ],
    "#weight" => -10,
    '#default_value' => isset($input['href']) ? $input['href'] : '',
    '#states' => [
      'visible' => [
        ':input[name="attributes[select-profile]"]' => ['value' => 'default'],
      ],
      'disabled' => [
        ':input[name="attributes[select-profile]"]' => ['value' => 'web_area_content'],
      ],
    ],
  ]);

  // Provide a second linkit input that uses the web_area_content linkit profile
  // and is disabled and hidden unless the web_area_content profile is selected.
  $form['attributes']['href_web_area_content'] = array_merge($form['attributes']['href'], [
    '#type' => 'linkit',
    '#description' => t('Start typing to find content.'),
    '#autocomplete_route_name' => 'linkit.autocomplete',
    '#autocomplete_route_parameters' => [
      'linkit_profile_id' => 'web_area_content',
    ],
    "#weight" => -10,
    '#default_value' => isset($input['href']) ? $input['href'] : '',
    '#states' => [
      'visible' => [
        ':input[name="attributes[select-profile]"]' => ['value' => 'web_area_content'],
      ],
      'disabled' => [
        ':input[name="attributes[select-profile]"]' => ['value' => 'default'],
      ],
    ],
  ]);

  $form['attributes']['href'] = array_merge($form['attributes']['href'], [
    '#states' => [
      'invisible' => [
        ':input[name="attributes[select-profile]"]' => [
          ['value' => 'web_area_content'],
          'or',
          ['value' => 'default']
        ],
      ],
    ],
  ]);

  array_unshift($form['#validate'], '_epa_wysiwyg_populate_href');
}

// Custom logic to accommodate the additional href_default and
// href_web_area_content attributes.
function _epa_wysiwyg_populate_href(array &$form, FormStateInterface $form_state) {
  $href_profile_fields = [
    'href_default',
    'href_web_area_content',
  ];

  $href_value = $form_state->getValue(['attributes', 'href']);

  foreach ($href_profile_fields as $field_name) {
    // The href attribute is reset to empty when the form is initialized. If the
    // attribute has a value when the form is submitted, then another module
    // (i.e. anchor) updated it. Let's set our linkit profile inputs to match.
    if (!empty($href_value)) {
      $form_state->setValue(['attributes', $field_name], $href_value);
    }
    // The href attribute is empty so we want to populate it with the value from
    // the linkit profile attribute that has a value.
    else {
      $value = $form_state->getValue(['attributes', $field_name]);
      if (!empty($value)) {
        $form_state->setValue(['attributes', 'href'], $value);
      }
    }

  }
}

/** taken from epa.gov epa_media custom module
 * Implements hook_form_FORM_ID_alter().
 */
function epa_media_form_editor_media_dialog_alter(array &$form, FormStateInterface $form_state) {
  // Extract the media UUID that is passed through from the WYSIWYG and use it
  // to load the media entity. Then add a link through to the media edit form
  // in the embedded media modal.
  $editor_object = $form_state->getUserInput()['editor_object'];
  $entity_repository = \Drupal::service('entity.repository');
  $media = $entity_repository->loadEntityByUuid('media', $editor_object['attributes']['data-entity-uuid']);
  $edit_url = Url::fromRoute('entity.media.edit_form', ['media' => $media->id()]);
  $link = Link::fromTextAndUrl('Edit this media item', $edit_url);

  if ($fid = $media->getSource()->getSourceFieldValue($media)){

    // Remote videos don't have a File. Source field value is URL to remote video itself.
    if ($media->bundle() == 'remote_video') {
      $form['file_url'] = [
        '#markup' => t('<p><strong>Remote Video URL:</strong> %remote_url</p>', ['%remote_url' => $fid])
      ];
    }
    else {
      $file_url = File::load($fid)->createFileUrl();
      $form['file_url'] = [
        '#markup' => t('<p><strong>File URL:</strong> %file_url</p>', ['%file_url' => $file_url])
      ];
    }
  }

  $form['edit_link'] = $link->toRenderable() + [
    '#attributes' => [
      'target' => '_blank',
    ],
  ];
}
